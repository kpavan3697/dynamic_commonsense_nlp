import streamlit as st
import networkx as nx
import matplotlib.pyplot as plt
import os
import datetime # To get current time of day

# Assume these are in your project structure
from reasoning.graph_builder import fetch_conceptnet_relations
from reasoning.multi_hop_reasoner import run_gnn_reasoning

# Configure Streamlit page
st.set_page_config(layout="wide", page_title="Persona Generation Demo")

st.title("ðŸ’¡ Dynamic Persona Generation through Commonsense Inference")
st.subheader("Leveraging Graph Neural Networks & ConceptNet")

# Sidebar for user input
with st.sidebar:
    st.header("User Input & Mood")
    user_query = st.text_area("Enter your query (e.g., 'I spilled water on my laptop', 'I am feeling bored', 'What is the capital of France?')", "I spilled water on my laptop.")
    
    mood_options = ["Neutral", "Happy", "Sad", "Angry", "Stressed", "Confused"]
    user_mood = st.selectbox("Select your current mood:", mood_options)
    
    max_nodes = st.slider("Max Graph Nodes (ConceptNet Fetch)", 20, 100, 50)
    max_edges = st.slider("Max Graph Edges (ConceptNet Fetch)", 50, 200, 100)
    max_hops = st.slider("ConceptNet Hops (Subgraph Depth)", 1, 3, 2)
    
    st.markdown("---")
    st.markdown("Developed for academic thesis.")

# Main content area
if st.button("Generate Persona"):
    if not user_query:
        st.warning("Please enter a query.")
    else:
        st.info(f"Processing query: '{user_query}' with mood: '{user_mood}'...")
        
        # Determine time of day dynamically
        current_hour = datetime.datetime.now().hour
        if 5 <= current_hour < 12:
            time_of_day = "morning"
        elif 12 <= current_hour < 17:
            time_of_day = "afternoon"
        elif 17 <= current_hour < 21:
            time_of_day = "evening"
        else:
            time_of_day = "night"

        # 1. Fetch ConceptNet Graph
        with st.spinner("Fetching commonsense knowledge from ConceptNet..."):
            try:
                # Use a lemma or simplified version of the query for ConceptNet lookup
                # For simplicity here, just use the first few words or a key concept
                search_term = user_query.split()[0].lower() if user_query else ""
                if "spilled water" in user_query.lower() or "laptop" in user_query.lower():
                    search_term = "spill" # Focus on the action/problem
                elif "bored" in user_query.lower() or "nothing to do" in user_query.lower():
                    search_term = "boredom" # Focus on the state
                elif "capital of france" in user_query.lower() or "france" in user_query.lower():
                    search_term = "france" # Focus on the entity
                
                if not search_term:
                    st.error("Could not determine a suitable search term from the query. Please refine your query.")
                    st.stop()

                concept_graph = fetch_conceptnet_relations(search_term, depth=max_hops, max_nodes=max_nodes, max_edges=max_edges)
                
                if concept_graph.number_of_nodes() == 0:
                    st.warning("Could not build a meaningful ConceptNet graph for your query. Try a different query or adjust parameters.")
                    st.stop()

                st.success(f"ConceptNet graph built with {concept_graph.number_of_nodes()} nodes and {concept_graph.number_of_edges()} edges.")
            except Exception as e:
                st.error(f"Error fetching ConceptNet graph: {e}")
                st.stop()

        # 2. Run GNN Reasoning
        with st.spinner("Running GNN reasoning for persona insights..."):
            try:
                # user_mood will be passed correctly
                gnn_output, node_mapping, viz_path, persona_insight = run_gnn_reasoning(concept_graph, user_query, user_mood)
                
                # --- Consolidated Persona Insight Display ---
                st.subheader("ðŸ’¡ Model's Commonsense Response")
                st.write(f"Your Query: \"{user_query}\"")
                st.write(f"Context: Weather - N/A, User Mood - {user_mood}, Time of Day - {time_of_day}") # Use actual user_mood

                if persona_insight:
                    st.markdown(f"**Knowledge Graph Insight:** {persona_insight}")
                else:
                    st.warning("No specific persona insight could be generated by the GNN.")

                # !!! THIS HARDCODED ADVICE LINE IS REMOVED/COMMENTED OUT !!!
                # st.markdown("Advice: To address this situation, it's generally helpful to gather more information and consider all relevant factors. Depending on the specifics, you might want to look into common solutions for similar issues. Taking your current context (weather, mood, and time of day) into account can also help you make a more effective plan.")

                # --- GNN-Derived Persona Scores ---
                st.subheader("ðŸ“Š GNN Persona Scores (Urgency, Distress, Practical Need, Empathy)")
                if gnn_output is not None and gnn_output.numel() > 0:
                    # Display the raw GNN scores (averaged over nodes)
                    avg_scores = gnn_output.mean(dim=0).cpu().numpy()
                    score_labels = ["Urgency", "Emotional Distress", "Practical Need", "Empathy Requirement"]
                    score_data = {label: [f"{score:.2f}"] for label, score in zip(score_labels, avg_scores)}
                    st.table(score_data) 
                else:
                    st.info("GNN output was empty or invalid. Scores cannot be displayed.")

                # --- Confidence Score (Placeholder) ---
                # This is a placeholder and should be derived from model confidence in a real system.
                # For demo, we can just use the urgency score as a proxy or a fixed high value.
                confidence_score = 90.0 # Example fixed value
                if gnn_output is not None and gnn_output.numel() > 0:
                    # Let's say higher practical need or urgency implies higher "confidence" in actionability
                    confidence_score = (gnn_output.mean(dim=0)[0].item() * 100 * 0.5 + gnn_output.mean(dim=0)[2].item() * 100 * 0.5) 
                    confidence_score = min(99.99, max(50.0, confidence_score)) # Clamp between 50 and 99.99
                
                st.subheader("ðŸ“Š Accuracy / Confidence")
                st.metric("Confidence Score", f"{confidence_score:.2f}%")


                st.subheader("ðŸ§  Knowledge Graph Visualization (GNN Attention)")
                if viz_path and os.path.exists(viz_path):
                    st.image(viz_path, caption="Subgraph with GNN Attention Weights (stronger edges = darker/more attention)", use_column_width=True)
                    st.success("Graph visualization generated successfully.")
                    # Clean up the image file after displaying, or keep for review
                    # os.remove(viz_path) 
                else:
                    st.info("No graph visualization could be generated. This might happen for very small or disconnected graphs, or if an error occurred.")

            except Exception as e:
                st.error(f"Error during GNN reasoning or visualization: {e}")
                import traceback
                st.exception(e) # Display full traceback in Streamlit
                st.stop()